%pip -q install google-genai google-adk

import os
from google.colab import userdata
from datetime import date
import textwrap
import warnings
from IPython.display import display, Markdown, HTML

from google import genai
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types

warnings.filterwarnings("ignore")

# Configura√ß√£o da API Key
os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')
client = genai.Client()
MODEL_ID = "gemini-2.0-flash" # Podemos ajustar o modelo conforme a necessidade

def call_agent(agent: Agent, message_text: str) -> str:
    session_service = InMemorySessionService()
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
            for part in event.content.parts:
                if part.text is not None:
                    final_response += part.text
                    final_response += "\n"
    return final_response

def to_markdown(text):
    text = text.replace('‚Ä¢', '  *')
    return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

def agente_identificador_necessidades(problema_comunidade, area_comunidade):
    identificador = Agent(
        name="agente_identificador_necessidades",
        model=MODEL_ID,
        instruction=f"""
        Voc√™ √© um especialista em analisar o seguinte problema relatado na comunidade de {area_comunidade}: "{problema_comunidade}".
        Sua tarefa √© usar a ferramenta de busca do Google (google_search) para entender melhor esse problema espec√≠fico no contexto de {area_comunidade}.
        Busque por informa√ß√µes sobre:
        - Causas comuns desse tipo de problema.
        - Impactos na comunidade.
        - Iniciativas semelhantes que foram implementadas com sucesso em outras localidades.
        Identifique at√© 3 aspectos chave do problema que precisam ser abordados para encontrar solu√ß√µes eficazes na comunidade de {area_comunidade}.
        """,
        description="Agente que aprofunda a compreens√£o do problema da comunidade.",
        tools=[google_search]
    )
    entrada = f"Problema: {problema_comunidade} na comunidade de {area_comunidade}. Causas, impactos, solu√ß√µes em outras comunidades."
    analise = call_agent(identificador, entrada)
    return analise

def agente_mapeador_recursos(area_comunidade, analise_problema):
    mapeador = Agent(
        name="agente_mapeador_recursos",
        model=MODEL_ID,
        instruction=f"""
        Voc√™ √© um especialista em mapear os recursos dispon√≠veis na comunidade de {area_comunidade} que podem ajudar a solucionar o problema,
        cujos aspectos chave foram identificados como: {analise_problema}.
        Sua tarefa √© usar a ferramenta de busca do Google (google_search) para encontrar informa√ß√µes sobre:
        - Volunt√°rios com habilidades relevantes para o problema.
        - Servi√ßos locais que podem oferecer suporte ou solu√ß√µes.
        - Organiza√ß√µes n√£o governamentais e iniciativas comunit√°rias focadas em problemas semelhantes ou que atuam em {area_comunidade}.
        - Espa√ßos ou equipamentos que poderiam ser utilizados para a√ß√µes de solu√ß√£o.
        Liste os tipos de recursos relevantes e, se poss√≠vel, exemplos espec√≠ficos encontrados na busca para a comunidade de {area_comunidade}.
        """,
        description="Agente que mapeia recursos comunit√°rios relevantes para o problema.",
        tools=[google_search]
    )
    entrada = f"Recursos dispon√≠veis em {area_comunidade} para solucionar o problema (aspectos chave: {analise_problema}): volunt√°rios, servi√ßos locais, ONGs, espa√ßos."
    recursos_mapeados = call_agent(mapeador, entrada)
    return recursos_mapeados

def agente_gerador_solucoes(area_comunidade, problema, analise_problema, recursos_mapeados):
    gerador = Agent(
        name="agente_gerador_solucoes",
        model=MODEL_ID,
        instruction=f"""
        Voc√™ √© um especialista em gerar solu√ß√µes criativas e pr√°ticas para o problema "{problema}" na comunidade de {area_comunidade},
        considerando a an√°lise do problema: {analise_problema} e os recursos mapeados: {recursos_mapeados}.
        Sua tarefa √© propor pelo menos 3 solu√ß√µes distintas e vi√°veis que a pr√≥pria comunidade poderia implementar, utilizando os recursos dispon√≠veis.
        Cada solu√ß√£o deve incluir:
        - Uma breve descri√ß√£o da a√ß√£o.
        - Os principais recursos necess√°rios (identificados pelo agente mapeador ou outros que voc√™ considere relevantes).
        - Os potenciais benef√≠cios para a comunidade.
        Seja criativo e pense em solu√ß√µes que promovam a colabora√ß√£o e o engajamento dos moradores.
        """,
        description="Agente que gera solu√ß√µes para o problema da comunidade.",
        tools=[] # N√£o necessariamente precisa de busca, mas pode ser √∫til para inspira√ß√£o
    )
    entrada = f"Gerar 3 solu√ß√µes para o problema '{problema}' em {area_comunidade}, considerando a an√°lise: {analise_problema} e os recursos: {recursos_mapeados}."
    solucoes_propostas = call_agent(gerador, entrada)
    return solucoes_propostas

def agente_avaliador_solucoes(problema, area_comunidade, solucoes_propostas):
    avaliador = Agent(
        name="agente_avaliador_solucoes",
        model=MODEL_ID,
        instruction=f"""
        Voc√™ √© um especialista em avaliar a viabilidade e o potencial impacto das seguintes solu√ß√µes propostas para o problema "{problema}" na comunidade de {area_comunidade}:
        {solucoes_propostas}.
        Para cada solu√ß√£o, sua tarefa √© analisar:
        - A probabilidade de sucesso com os recursos dispon√≠veis.
        - Os potenciais desafios ou obst√°culos para a implementa√ß√£o.
        - O impacto esperado na resolu√ß√£o do problema e no bem-estar da comunidade.
        Apresente uma breve avalia√ß√£o para cada solu√ß√£o, destacando seus pontos fortes e fracos.
        """,
        description="Agente que avalia a viabilidade e o impacto das solu√ß√µes propostas.",
        tools=[] # N√£o precisa de busca para avaliar as solu√ß√µes apresentadas
    )
    entrada = f"Avaliar as solu√ß√µes para o problema '{problema}' em {area_comunidade}: {solucoes_propostas} (viabilidade, desafios, impacto)."
    avaliacao_solucoes = call_agent(avaliador, entrada)
    return avaliacao_solucoes

print("ü§ù Bem-vindo ao Sistema 'Elo Comunit√°rio' ü§ù")

problema = input("‚ùì Qual √© o principal problema que voc√™ gostaria de resolver em sua comunidade? ")
area = input("üìç Em qual localidade/bairro espec√≠fico esse problema ocorre? ")

if not problema or not area:
    print("Por favor, informe o problema e a localiza√ß√£o.")
else:
    print(f"\nü§î Analisando o problema '{problema}' em {area}...")
    analise = agente_identificador_necessidades(problema, area)
    print("\n--- üîç An√°lise do Problema ---\n")
    display(to_markdown(analise))
    print("--------------------------------------------------------------")

    print(f"\nüó∫Ô∏è Mapeando os recursos dispon√≠veis em {area} para o problema...")
    recursos = agente_mapeador_recursos(area, analise)
    print("\n--- üí° Recursos Mapeados ---\n")
    display(to_markdown(recursos))
    print("--------------------------------------------------------------")

    print("\nüí° Gerando solu√ß√µes para o problema...")
    solucoes = agente_gerador_solucoes(area, problema, analise, recursos) # Corre√ß√£o aqui: passando 'analise'
    print("\n--- ‚ú® Solu√ß√µes Propostas ---\n")
    display(to_markdown(solucoes))
    print("--------------------------------------------------------------")

    print("\nüßê Avaliando a viabilidade das solu√ß√µes...")
    avaliacao = agente_avaliador_solucoes(problema, area, solucoes)
    print("\n--- üìä Avalia√ß√£o das Solu√ß√µes ---\n")
    display(to_markdown(avaliacao))
    print("--------------------------------------------------------------")

    print("\nüéâ O sistema 'Elo Comunit√°rio' gerou algumas ideias e avalia√ß√µes para ajudar a resolver o problema na sua comunidade!")